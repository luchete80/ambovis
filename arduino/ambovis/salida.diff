diff --git a/arduino/ambovis/MechVentilation.cpp b/arduino/ambovis/MechVentilation.cpp
index 1a8d6bb..7488718 100644
--- a/arduino/ambovis/MechVentilation.cpp
+++ b/arduino/ambovis/MechVentilation.cpp
@@ -12,6 +12,9 @@ int currentWaitTriggerTime = 0;
 int currentStopInsufflationTime = 0;
 float currentFlow = 0;
 
+float pressure_max;
+float pressure_min;
+
 MechVentilation::MechVentilation(
         #ifdef ACCEL_STEPPER
         AccelStepper *stepper,
@@ -189,7 +192,6 @@ void MechVentilation::update(void)
 
   _msecTimerCnt=(unsigned long)(millis()-_msecTimerStartCycle);
     SensorPressureValues_t pressures = _sensors->getRelativePressureInCmH20();
-    _currentPressure = pressure_p - pressure_p0;
 
     if (pressures.state != SensorStateOK)
     {                                  // Sensor error detected: return to zero position and continue from there
@@ -199,11 +201,24 @@ void MechVentilation::update(void)
         Serial.println("fail sensor");
         _setState(State_Exsufflation);
     }
-    else
-    {
+    else {
         _sensor_error_detected = false; //clear flag
     }
 
+    //CHECK PIP AND PEEP (OUTSIDE ANY CYCLE!!)
+    if (pressure_p>pressure_max) {
+          pressure_max=pressure_p;
+          #ifdef DEBUG_UPDATE
+            Serial.print("max pressure: ");Serial.println(pressure_max);
+          #endif
+    }
+    else if (pressure_p < pressure_min){
+        pressure_min=pressure_p;
+          #ifdef DEBUG_UPDATE
+            Serial.print("Min pressure: ");Serial.println(pressure_min);
+          #endif
+    }
+
     // Check pressures
     evaluatePressure();
 
@@ -213,9 +228,12 @@ void MechVentilation::update(void)
     {
     case Init_Insufflation:
     {
-        pressure_max=0;
+      pressure_max=0;
+      pressure_min=60;
+
 #if DEBUG_UPDATE
-        //Serial.println("Starting insuflation");
+        Serial.println("Starting insuflation");
+        Serial.print("pressure_max");
 #endif
         // Close Solenoid Valve
         digitalWrite(PIN_SOLENOID, SOLENOID_CLOSED);
@@ -252,8 +270,8 @@ void MechVentilation::update(void)
         }
 
         if (vent_mode==VENTMODE_PCL){
-            max_accel=(_pip-20)/20.*(5000-500)+2000;
-            max_speed=(_pip-20)/20.*(3000-500)+2000;
+            max_accel=(_pip-20)/20.*(3000-500)+500;
+            max_speed=(_pip-20)/20.*(3000-500)+500;
             _stepper->setAccelerationInStepsPerSecondPerSecond(max_accel);          
         }
         
@@ -273,15 +291,7 @@ void MechVentilation::update(void)
     {
 
         /* Stepper control: set end position */
-////LUCIANO
-//#if DEBUG_UPDATE
-//  Serial.println("Motor:speed=" + String(_stepperSpeed) + "steps/sec");
-//#endif
-        //IF _mllastInsVol
-        //VOLUME CONTROL
-        if (pressure_p>pressure_max)
-          pressure_max=pressure_p;
-          
+            
         if (vent_mode==VENTMODE_VCL && _mlInsVol>_tidalVol){
             _stepper->setTargetPositionToStop();
             //_setState(Init_Exsufflation); NOT BEGIN TO INSUFFLATE!
@@ -333,10 +343,10 @@ void MechVentilation::update(void)
                 if (_stepperSpeed>STEPPER_SPEED_MAX_VCL)
                   _stepperSpeed=STEPPER_SPEED_MAX_VCL;
                } else if (vent_mode==VENTMODE_PCL) {
-                  if ( (pressure_p-pressure_p0)<0)
+                  if ( (pressure_p)<0)
                     _stepperSpeed=STEPPER_SPEED_DEFAULT;
                   else
-                    _pid->run(float(pressure_p-pressure_p0), (float)_pip, &_stepperSpeed);
+                    _pid->run(pressure_p, (float)_pip, &_stepperSpeed);
                     if (_stepperSpeed > max_speed)
                       _stepperSpeed=max_speed;
                }                
@@ -378,7 +388,13 @@ void MechVentilation::update(void)
     break;
     case Init_Exsufflation:
     {
-      pressure_min=103000.*DEFAULT_PA_TO_CM_H20;
+      if (pressure_p<pressure_min) {
+          pressure_min=pressure_p;
+          #ifdef DEBUG_UPDATE
+            Serial.print("min pressure: ");Serial.println(pressure_p);
+          #endif
+        }
+        
       _msecTimerStartCycle=millis();
       //Serial.print("Current pressure");Serial.println(_currentPressure);
       
@@ -426,8 +442,6 @@ void MechVentilation::update(void)
     break;
     case State_Exsufflation:
     {
-      if (pressure_p<pressure_min)
-        pressure_min=pressure_p;
     
 //#if 0
 //        if (_stepper->motionComplete())
diff --git a/arduino/ambovis/Sensors.h b/arduino/ambovis/Sensors.h
index 341eaae..2d301ab 100644
--- a/arduino/ambovis/Sensors.h
+++ b/arduino/ambovis/Sensors.h
@@ -91,7 +91,7 @@ class Sensors
 
 extern float pressure_max;
 extern float pressure_min;
-extern float pressure_p;
+extern float pressure_p;  //DIFFERENTIALS!
 extern float pressure_p0;
 extern float _flux,_flux_0;
 extern Pressure_Sensor _dpsensor;  //Used for venturi
diff --git a/arduino/ambovis/ambovis.ino b/arduino/ambovis/ambovis.ino
index 0a20118..18bf685 100644
--- a/arduino/ambovis/ambovis.ino
+++ b/arduino/ambovis/ambovis.ino
@@ -50,8 +50,6 @@ byte vent_mode = VENTMODE_PCL; //0
 Adafruit_BMP280 _pres1Sensor;
 Pressure_Sensor _dpsensor;
 float pressure_p0;
-float pressure_max;
-float pressure_min;
 float _mlInsVol,_mllastInsVol;
 float _flux,_flux_0;
 //float _stepperSpeed;
@@ -320,6 +318,9 @@ void setup() {
 
   //MAKE AN IF IF_2_PRESS_SENSORS
   pressure_p0 = _pres1Sensor.readPressure() * DEFAULT_PA_TO_CM_H20;
+  #ifdef DEBUG_UPDATE
+    Serial.print("Pressure_p0");Serial.print(pressure_p0);
+  #endif
 
   //calcularCaudalVenturi(_dpsensor.get_dp(), &_flux_0);
 
@@ -362,7 +363,9 @@ void loop() {
   if (time > lastReadSensor + TIME_SENSOR)
   {
     //    //Is not anymore in classes
-    pressure_p = _pres1Sensor.readPressure() * DEFAULT_PA_TO_CM_H20;
+    #ifndef P_HONEYWELL
+      pressure_p = _pres1Sensor.readPressure() * DEFAULT_PA_TO_CM_H20 - pressure_p0;
+    #endif
     //Serial.print("PRessure");Serial.println(pressure_p);
 
     ////////////////////////////// MOTOR RUNNING MAKING NOISE //////////////////////////////
@@ -622,7 +625,10 @@ void display_lcd ( ) {
   writeLine(3, "PEEP:" + String(options.peakEspiratoryPressure), 8);
   dtostrf(pressure_min - pressure_p0, 2, 0, tempstr);
   writeLine(3, String(tempstr), 16);
-
+  #ifdef DEBUG_UPDATE
+    Serial.print("Max and Min pressures: ");Serial.print(pressure_max);Serial.print(",");Serial.println(pressure_min);
+  #endif
+  
   lcd_clearxy(0,0);
   lcd_clearxy(0,1);lcd_clearxy(9,1);
   lcd_clearxy(0,2);lcd_clearxy(7,2);
diff --git a/arduino/ambovis/defaults.h b/arduino/ambovis/defaults.h
index 1895b15..36f1d7a 100644
--- a/arduino/ambovis/defaults.h
+++ b/arduino/ambovis/defaults.h
@@ -39,8 +39,8 @@
 //#define STEPPER_LOWEST_POSITION     (STEPPER_MICROSTEPS *  -100)   // Steps
 //#define STEPPER_HIGHEST_POSITION    (STEPPER_MICROSTEPS *   100)   // Steps
 #define STEPPER_LOWEST_POSITION     (-10)   // Steps
-//#define STEPPER_HIGHEST_POSITION    ( 1200)   //270ยบ
-#define STEPPER_HIGHEST_POSITION    ( 1466)   //330ยบ
+#define STEPPER_HIGHEST_POSITION    ( 1200)   //270ยบ
+//#define STEPPER_HIGHEST_POSITION    ( 1466)   //330ยบ
 #define STEPPER_SPEED_DEFAULT       (400)   // Steps/s
 #define STEPPER_SPEED_MAX           (STEPPER_MICROSTEPS * 1600)   // Steps/s  //THIS IS FOR 1600 steps in a revolution. DO NOT GO BEYOND THIS!
 #define STEPPER_SPEED_MAX_VCL       (1200)   // Steps/s  //THIS IS FOR 1600 steps in a revolution. DO NOT GO BEYOND THIS!
