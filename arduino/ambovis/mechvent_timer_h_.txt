/** Mechanical ventilation.
 *
 * @file MechVentilation.h
 *
 * This is the mechanical ventilation software module.
 * It handles the mechanical ventilation control loop.
 */
#ifndef INC_MECHANICAL_VENTILATION_H
#define INC_MECHANICAL_VENTILATION_H

#include <inttypes.h>
#include "src/AccelStepper/AccelStepper.h"
#ifdef ADA_PRESS
#include "src/Adafruit_BMP280/Adafruit_BMP280.h"
#else
#include "src/Pressure_Sensor/Pressure_Sensor.h"
#endif
#include "PID.h"


/** States of the mechanical ventilation. */
enum State {
    State_Init = 0,               /**< Initializing. */
    State_Idle = 1,               /**< Idle. */
    State_WaitTrigger = 2,        /**< Wait for trigger. */
    State_StartInsufflation = 3,  /**< Start insufflation. */
    State_Insufflation = 4,       /**< Insufflating (PID control). */
    State_StopInsufflation = 5,   /**< Stop insufflation. */
    State_WaitExsufflation = 6,   /**< Wait for the patient to exsufflate. */
    State_Shutdown = 7            /**< Shutdown. */
};


enum Alarm
{
    No_Alarm = 0,
    Alarm_Overpressure = 1,
    Alarm_Underpressure = 2,
    Alarm_No_Flux = 3
};

typedef struct {
    float pip;
    unsigned short timeoutIns;
} Configuration_t;

/**
 * This is the mechanical ventilation class.
 */
class MechVentilation {
public:
	/**
	 * Constructor (no trigger).
	 *
     * @param[in]   mlTidalVolume             Tidal volume in millilitres.
	 * @param[in]   secTimeoutInsufflation    Insufflation timeout in seconds.
	 * @param[in]   secTimeoutExsufflation    Exsufflation timeout in seconds.
     * @param[in]   speedInsufflation         Insufflation speed. @todo Denote units.
     * @param[in]   speedExsufflation         Exsufflation speed. @todo Denote units.
     *
	 */

  MechVentilation();
  
	MechVentilation(
        PID pid,    //TODO Check????
        AccelStepper stepper,
        //Adafruit_BMP280_Pressure bmp1,
        //Adafruit_BMP280_Pressure bmp2,
        Pressure_Sensor bmp1,
        Pressure_Sensor bmp2,
        float mlTidalVolume,
        float secTimeoutInsufflation,
        float secTimeoutExsufflation,
        float speedInsufflation,
        float speedExsufflation
    );

    /**
	 * Constructor (triggered mechanical ventilation).
	 *
     * @param[in]   mlTidalVolume             Tidal volume in millilitres.
	 * @param[in]   secTimeoutInsufflation    Insufflation timeout in seconds.
	 * @param[in]   secTimeoutExsufflation    Exsufflation timeout in seconds.
     * @param[in]   speedInsufflation         Insufflation speed. @todo Denote units.
     * @param[in]   speedExsufflation         Exsufflation speed. @todo Denote units.
     * @param[in]   lpmFluxTriggerValue       Flux trigger value in Litres Per Minute.
     *
	 */

	MechVentilation(
        PID pid,    //TODO Check????
        AccelStepper stepper,
//        Adafruit_BMP280_Pressure bmp1,
//        Adafruit_BMP280_Pressure bmp2,
        Pressure_Sensor bmp1,
        Pressure_Sensor bmp2,
        //Adafruit_BMP280 bmp1,
        //Adafruit_BMP280 bmp2,
        float mlTidalVolume,
        float secTimeoutInsufflation,
        float secTimeoutExsufflation,
        float speedInsufflation,
        float speedExsufflation,
        float lpmFluxTriggerValue
    );

    /* Setters/getters */
    // TODO: Add stepper, bmp1, bmp2 setters
    /** Set tidal volume */
    void setTidalVolume(float mlTidalVolume);
    /** Set insufflation timeout. */
    void setTimeoutInsufflation(float secTimeoutInsufflation);
    /** Set exsufflation timeout. */
    void setTimeoutExsufflation(float secTimeoutExsufflation);
    /** Set insufflation speed. */
    void setSpeedInsufflation(float speedInsufflation);
    /** Set exsufflation speed. */
    void setSpeedExsufflation(float speedExsufflation);

    /** Start mechanical ventilation. */
    void start(void);
    /** Stop mechanical ventilation. */
    void stop(void);
    /** Update mechanical ventilation.
     *
     * If any control variable were to change, new value
     * would be applied at the beginning of the next ventilation
     * cycle.
     *
     * @note This method must be called on the main loop.
     */
    void update(void);
    int getState();
    float getmlInsVol()
    {return _mlInsVol;}

    float getsecdtLastUpdate(){return float(_msecTimerCnt-_msecLastUpdate)*1000.;}
        
private:
    /** Generic initialization. */
    void _init(
        PID pid,
        AccelStepper stepper,
//        Adafruit_BMP280_Pressure bmp1,
//        Adafruit_BMP280_Pressure bmp2,
        //Adafruit_BMP280 bmp1,
        //Adafruit_BMP280 bmp2,
        Pressure_Sensor bmp1,
        Pressure_Sensor bmp2,
        float mlTidalVolume,
        float secTimeoutInsufflation,
        float secTimeoutExsufflation,
        float speedInsufflation,
        float speedExsufflation,
        float lpmFluxTriggerValue
    );

    /** Set state. */
    void _setState(State state);
    /* Configuration parameters */
    AccelStepper    *_cfgStepper;

    #ifdef ADA_PRESS
    //Adafruit_BMP280 _cfgBmp1;
    //Adafruit_BMP280 _cfgBmp2;
    Adafruit_BMP280_Pressure _cfgBmp1;
    Adafruit_BMP280_Pressure _cfgBmp2;
    #else
    Pressure_Sensor  _cfgBmp1;
    Pressure_Sensor  _cfgBmp2;
    #endif
            
    /** Tidal volume in millilitres. */
    float _cfgmlTidalVolume;
    /** Flux trigger value in litres per minute. */
    float _cfgLpmFluxTriggerValue;
    /**  Insufflation timeout in seconds. */
    float _cfgSecTimeoutInsufflation;
    /* Exsufflation timeout in seconds. */
    float _cfgSecTimeoutExsufflation;
    /** Insufflation speed. @todo Denote units. */
    float _cfgSpeedInsufflation;
    /** Exsufflation speed. @todo Denote units. */
    float _cfgSpeedExsufflation;

    //Calculados en base a la data
    float _mlmsFlow,_mlmsprevFlow;  
    float _mlInsVol;
    /* Internal state */
    /** Previous state. @todo Consider removing. */
    State _previousState;
    /** Current state. */
    State _currentState;
    /** Next state. @todo Consider removing. */
    State _nextState;
    /** Timer counter in seconds. */
    //Este tambien es mio
    unsigned long _msecTimerStartCycle; //CADA semiciclo
    unsigned long _msecLastUpdate; //CADA semiciclo
   
    unsigned long _msecTimerCnt; //esteno necesita ser tan grande
    /**  Insufflation timeout in seconds. */
    // Cambiado por luciano
    unsigned long _msecTimeoutInsufflation;
    /** Exsufflation timeout in seconds. */
    unsigned long _msecTimeoutExsufflation;
    
    /** Insufflation speed. @todo Denote units. */
    float _speedInsufflation;
    /** Exsufflation speed. @todo Denote units. */
    float _speedExsufflation;
    /** Sensors pressure events. */
    #ifdef ADA_PRESS
    sensors_event_t _pressure1Event, _pressure2Event;
    #endif
    /** Sensors pressure in hPa. */
    float _pressure1, _pressure2;
    /** Estimated flux accross the bmps. @todo Denote units. */
    float _flux;
    
    float disp_perc; //pusher displacement 0 to 100%(255)

    /* @todo PID stuff */
    PID *_cfgpid;
    AccelStepper *stepper;
};

#endif /* INC_MECHANICAL_VENTILATION_H */